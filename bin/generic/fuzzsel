#!/usr/bin/env crun
// fuzzsel: Selects the closest matching line from stdin compared to argv[1]

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <limits.h>

// Settings
#define INITIAL_BUFFER 1024

// Some handy macros and aliases.
#define MIN(x, y) (((x) < (y)) ? (x) : (y))
#define MIN3(a, b, c) (MIN(MIN(a, b), c))
#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MAX3(a, b, c) (MAX(MAX(a, b), c))
#define ARRAY_SIZE(stuff) (sizeof(stuff) / sizeof(stuff[0]))

typedef unsigned int uint;
typedef const char cchar;

uint levenshtein(cchar* str_a, size_t len_a, cchar* str_b, size_t len_b) {
	if (len_a == 0) return len_b;
	if (len_b == 0) return len_a;

	uint x, y, lastdiag, olddiag;
	uint* col = malloc((len_a + 1) * sizeof(uint));

	for (y = 1; y <= len_a; y++)
		col[y] = y;
	for (x = 1; x <= len_b; x++) {
		col[0] = x;
		for (y = 1, lastdiag = x-1; y <= len_a; y++) {
			olddiag = col[y];
			col[y] = MIN3(col[y] + 1, col[y-1] + 1, lastdiag + (str_a[y-1] == str_b[x-1] ? 0 : 1));
			lastdiag = olddiag;
		}
	}

	uint ret = col[len_a];
	free(col);
	return ret;
}

int main(int argc, char* argv[]) {
	if (argc != 2) {
		printf("Usage: cat mydata | fuzzsel 'my ideal match'\n");
		return 1;
	}

	char* target = argv[1];
	size_t target_len = strlen(argv[1]);
	uint closest_dist = UINT_MAX;
	char* closest_match = NULL;

	char *line  = malloc(INITIAL_BUFFER);
	size_t size = INITIAL_BUFFER;
	while (getline(&line, &size, stdin) != -1) {
		// size - 1 = Truncate string to remove \n
		uint dist = levenshtein(target, target_len, line, size - 1);

		if (dist < closest_dist) {
			closest_match = realloc(closest_match, size);
			strncpy(closest_match, line, size);
			closest_match[size - 1] = 0;
			closest_dist = dist;
		}
	}

	printf("%s", closest_match);
	return 0;
}
