#!/bin/sh
# CRUN V1.1
# Runs a C source file like a script.
# Parses comments looking like this:
# // @ CFLAGS = -Os -Wall
# Variables you can set: CC, CFLAGS, CPPFLAGS
#
# Made by vifino, with love.
# Copyright (C) vifino 2018 under the WTFPL.
# Do what the fuck you want to.

set -e

[ -z "$1" ] && echo "Usage: $(basename $0) myscript.c" && exit 1
[ ! -f "$1" ] && echo "crun: file not found: $1" && exit 1

has_bin() {
	command -v "$1" > /dev/null
}
if has_bin realpath; then
	RP() {
		realpath "$1"
	}
else
	RP() {
		_OURPWD=$PWD
		cd "$(dirname "$1")"
		LINK=$(readlink "$(basename "$1")")
		while [ "$LINK" ]; do
			cd "$(dirname "$LINK")"
			LINK=$(readlink "$(basename "$1")")
		done
		echo "$PWD/$(basename "$1")"
		cd "$_OURPWD"
}
fi

SOURCE="$(RP "$1")"
shift # rest is arguments

# Where we store our build.
CACHEFILE="$HOME/.cache/crun/$SOURCE.bin"
mkdir -p "$(dirname "$CACHEFILE")"

if [ -f "$CACHEFILE" ] && [ "$CACHEFILE" -nt "$SOURCE" ]; then
	# Cache file exists and is newer than the source code.
	exec "$CACHEFILE" "$@"
fi

getvar() {
	# $1 is the param, $2 is the file
	# parses lines that look like this: // @ CFLAGS = -Os -lwhatever
	# ugly because of the eval, but it works.
	VAR="$(awk -F "=" "/\/\/ @ CPPFLAGS/ { OFS=\"=\"; \$1=\"\"; sub(FS,\"\"); print \$0}" "$2")"
	[ -z "$VAR" ] && eval "echo \$$1" && return
	echo $VAR
}

# Load all kinds of variables.
CC_NEW=$(getvar CC "$SOURCE")
[ -z "$CC" ] && CC=cc
CFLAGS=$(getvar CFLAGS "$SOURCE")
[ -z "$CFLAGS" ] && CFLAGS="-O2 -march=native"
CPPFLAGS=$(getvar CPPFLAGS "$SOURCE")
LDFLAGS=$(getvar LDFLAGS "$SOURCE")

export CC CFLAGS CPPFLAGS LDFLAGS

# Compile.
# Sorta unsafe, because we have to leave flags and stuff to parsing of the shell..
tail -n+2 "$SOURCE" | "$CC" $CPPFLAGS $CFLAGS -o "$CACHEFILE" -x c - $LDFLAGS

# We're done now, run it.
exec "$CACHEFILE" "$@"
