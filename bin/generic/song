#!/bin/sh
# song v1.1 by vifino.
# A small music player controller.
# Supports: MPD, CMUS and Spotify on OSX.
set -e

usage() {
	cat <<EOF
song: A utility to control some media players and get the playing song.
Usage: song [cmd] [args..]
Commands:
 playing:       Check if a song is playing.
    name:       Get the playing song if the player is playing.
     uri:       Get the URI of the current song.
   pause:       Pause the playing song.
    play:       Resume playing.
  toggle:       Toggle playing.
    next:       Skip to the next song.
    prev:       Go to the last song/beginning of the current song.
   vol [N%]:     Get the volume, optionally set to N%.
EOF
}

# Helpers
hasbin() {
	command -v "$1" > /dev/null
}

make_uri() {
	sed 's%^/%file:///%'
}

rescale_tof() {
	VAL="$(sed 's/[^0-9.]//g')"
	if [ "$VAL" = "$1" ]; then
		echo 1
	else
		# BC drops leading zeros.
		printf "0"
		echo "scale=2; ($VAL) / $1" | bc
	fi
}

rescale_top() {
	VAL="$(sed 's/[^0-9.]//g')"
	if [ "$VAL" = "$1" ]; then
		echo 100%
	elif [ "$VAL" = "0" ]; then
		echo 0%
	else
		echo "scale=2; ($VAL) * (100/$1)" | bc | sed -e 's/^0$/0%/' -e 's/^1$/100%/' -e 's/\.0*$/%/'
	fi
}

# Interfaces to the players.
export MPC_FORMAT="[[%artist% - ]%title%]|[%file%]"
mpd() {
	while :; do
		[ -z "$1" ] && break
		CMD="$1"; shift;
		case "$CMD" in
			playing) mpc status -f "" | grep playing >/dev/null ;;
			uri) mpc status -f "[%file%]" | make_uri;;
			name) mpc current ;;
			play|pause|toggle|next|prev) mpc -q $CMD; mpc current ;;
			stop) mpc -q $CMD ;;
			vol)
				if [ ! -z "$1" ]; then
					mpc -q volume "$1" >/dev/null
					shift
				fi
				mpc | sed -E 's/volume:(.*)%.*$/\1%/' ;;
			*) echo "Unknown command: $CMD"; usage; return 1 ;;
		esac
	done
}

cmus() {
	while :; do
		[ -z "$1" ] && break
		CMD="$1"; shift;
		case "$CMD" in
			playing) cmus-remote -Q | grep -m 1 playing >/dev/null ;;
			uri) cmus-remote -C "format_print '%f'" | make_uri ;;
			name) cmus-remote -C "format_print '%a - %t'" ;;
			play|pause|next|prev) cmus-remote --$CMD && cmus name ;;
			toggle) cmus playing && cmus pause || cmus play ;;
			stop) cmus-remote --$CMD ;;
			vol)
				if [ -z "$1" ]; then
					printf "%s%%\n" "$(cmus-remote -Q | grep vol_right | cut -d" " -f3)"
				else
					cmus-remote -v "$1"
					shift
				fi ;;
			*) echo "Unknown command: $CMD"; usage; return 1 ;;
		esac
	done
}

mpris_playerctl() {
	while :; do
		[ -z "$1" ] && break
		CMD="$1"; shift;
		case "$CMD" in
			playing) [ "$(playerctl status)" = "Playing" ] ;;
			name) mpris_playerctl playing && playerctl metadata -f "{{ artist }} - {{ title }}" ;;
			file) mpris_playerctl playing && playerctl metadata -f "{{ mpris:trackid }}" ;;
			play|pause|stop|next) playerctl $CMD ;;
			toggle) playerctl play-pause ;;
			prev) playerctl previous ;;
			vol)
				if [ -z "$1" ]; then
					playerctl volume | rescale_top 1
				else
					NV="$(echo "$1" | rescale_tof 100)"
					playerctl volume "$NV"
					shift
				fi ;;

			*) echo "Unknown command: $CMD"; usage; return 1 ;;
		esac
	done
}

spotify_mac() {
	# On Macs we have to use different things.
	# Because OSX has to always be incompatible. Duh.
	TS() {
		osascript -e "tell application \"Spotify\" to $*"
	}
	while :; do
		[ -z "$1" ] && break
		CMD="$1"; shift;
		case "$CMD" in
			playing) [ "$(TS player state as string)" = "playing" ] ;;
			name) printf "%s - %s\n" "$(TS artist of current track as string)" "$(TS name of current track as string)" ;;
			toggle) TS playpause ;;
			play) spotify_mac playing || TS playpause ;;
			pause) spotify_mac playing && TS playpause ;;
			next) TS next track ;;
			prev) TS previous track ;;
			stop) spotify_mac pause ;; # there is no stop apparently.
			vol)
				if [ -z "$1" ]; then
					printf "%s%%\n" $(TS sound volume as integer)
				else
					TS set sound volume to "$1"
					shift
				fi ;;
			*) echo "Unknown command: $CMD"; usage; return 1 ;;
		esac
	done
}

# Our interface.
[ -z "$1" ] && DFLT=name
if [ ! -z "$MPD_HOST" ] || running mpd; then
	mpd $DFLT "$@"
	exit $?
fi

if running cmus; then
	cmus $DFLT "$@"
	exit $?
fi

if hasbin playerctl; then
	mpris_playerctl $DFLT "$@"
	exit $?
fi

if [ `uname` = "Darwin" ] && running Spotify; then
	spotify_mac $DFLT "$@"
	exit $?
fi

echo "No supported players found. Currently supports: mpd, cmus, playerctl, Spotify (OSX)."
exit 1
